name: Release

on:
  push:
    branches:
      - main
      - develop
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

jobs:
  test:
    name: Test & Quality Gate
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: latest

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install

      - name: Run linting
        run: pnpm run lint

      - name: Run type checking
        run: pnpm run type-check

      - name: Run tests
        run: pnpm run test:run

      - name: Build application
        run: pnpm run build
        env:
          NEXT_TELEMETRY_DISABLED: 1

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [test]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    permissions:
      contents: write
      issues: write
      pull-requests: write
      id-token: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: false

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: latest

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install

      - name: Verify the integrity of provenance attestations and registry signatures for installed dependencies
        run: npm audit signatures

      - name: Generate component documentation
        run: pnpm run docs:storybook-extract

      - name: Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: pnpm run release

  update-documentation:
    name: Update Documentation
    runs-on: ubuntu-latest
    needs: [release]
    if: needs.release.result == 'success'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: main

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: latest

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install Node.js dependencies
        run: pnpm install

      - name: Install Python dependencies
        run: |
          pip install mkdocs-material mkdocs-git-revision-date-localized-plugin \
            mkdocs-git-committers-plugin-2 mkdocs-awesome-pages-plugin \
            mkdocs-macros-plugin mkdocs-minify-plugin mike

      - name: Generate component documentation
        run: pnpm run docs:storybook-extract

      - name: Update documentation index with latest release info
        run: |
          # Update the documentation index with the latest version info
          LATEST_TAG=$(git describe --tags --abbrev=0)
          LATEST_VERSION=${LATEST_TAG#v}
          
          # Update docs/index.md with latest version
          sed -i "s/Last Updated: .*/Last Updated: $(date +%Y-%m-%d)/g" docs/index.md
          sed -i "s/Version: .*/Version: $LATEST_VERSION/g" docs/index.md

      - name: Build Storybook
        run: pnpm run build-storybook

      - name: Build MkDocs
        run: pnpm run docs:build

      - name: Deploy Documentation to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./site
          destination_dir: docs
          commit_message: 'docs: update documentation for release'

      - name: Deploy Storybook to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./storybook-static
          destination_dir: storybook
          commit_message: 'docs: update storybook for release'

  notify-success:
    name: Notify Release Success
    runs-on: ubuntu-latest
    needs: [release, update-documentation]
    if: always() && needs.release.result == 'success'
    steps:
      - name: Get release info
        id: release-info
        run: |
          echo "release_version=$(git describe --tags --abbrev=0 || echo 'unknown')" >> $GITHUB_OUTPUT
          echo "release_date=$(date +'%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_OUTPUT

      - name: Create deployment notification
        run: |
          echo "ðŸŽ‰ Release ${{ steps.release-info.outputs.release_version }} deployed successfully!"
          echo "ðŸ“… Release Date: ${{ steps.release-info.outputs.release_date }}"
          echo "ðŸ“š Documentation: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/docs/"
          echo "ðŸ“– Storybook: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/storybook/"
          echo "ðŸ”— Repository: https://github.com/${{ github.repository }}"

      - name: Update status
        run: |
          echo "âœ… Documentation hub updated with latest release"
          echo "âœ… Changelog automatically generated"
          echo "âœ… Component documentation refreshed"
          echo "âœ… Rule compliance maintained"
