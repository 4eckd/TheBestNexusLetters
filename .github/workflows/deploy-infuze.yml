name: 🚀 Deploy to Infuze.cloud

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      skip_tests:
        description: 'Skip tests (not recommended)'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '18.x'
  PNPM_VERSION: '8.x'

jobs:
  # Quality gates - run on all pushes and PRs
  quality-gates:
    name: 🧪 Quality Gates
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false

      - name: 📁 Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: 💾 Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: 📦 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🔍 TypeScript type check
        run: pnpm run type-check

      - name: 🔍 ESLint
        run: pnpm run lint

      - name: 🧪 Run unit tests
        if: ${{ !inputs.skip_tests }}
        run: pnpm run test:run

      - name: 🏗️ Build application
        run: pnpm run build
        env:
          # Use placeholder values for build
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL || 'https://placeholder.supabase.co' }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY || 'placeholder-key' }}
          NEXTAUTH_SECRET: ${{ secrets.NEXTAUTH_SECRET || 'placeholder-secret' }}

  # Determine deployment environment
  determine-environment:
    name: 🎯 Determine Environment
    runs-on: ubuntu-latest
    needs: quality-gates
    outputs:
      environment: ${{ steps.env.outputs.environment }}
      should_deploy: ${{ steps.env.outputs.should_deploy }}
      server_ip: ${{ steps.env.outputs.server_ip }}
      app_url: ${{ steps.env.outputs.app_url }}
    
    steps:
      - name: 🎯 Set environment variables
        id: env
        run: |
          # Determine environment based on branch or manual input
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            ENVIRONMENT="${{ inputs.environment }}"
          elif [ "${{ github.ref }}" = "refs/heads/main" ]; then
            ENVIRONMENT="production"
          elif [ "${{ github.ref }}" = "refs/heads/develop" ]; then
            ENVIRONMENT="staging"
          else
            ENVIRONMENT="none"
          fi
          
          echo "environment=${ENVIRONMENT}" >> $GITHUB_OUTPUT
          
          # Determine if we should deploy
          if [ "${ENVIRONMENT}" = "none" ] || [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "should_deploy=false" >> $GITHUB_OUTPUT
          else
            echo "should_deploy=true" >> $GITHUB_OUTPUT
          fi
          
          # Set environment-specific variables
          if [ "${ENVIRONMENT}" = "production" ]; then
            echo "server_ip=${{ vars.INFUZE_SERVER_IP_PRODUCTION }}" >> $GITHUB_OUTPUT
            echo "app_url=${{ vars.NEXT_PUBLIC_APP_URL_PRODUCTION }}" >> $GITHUB_OUTPUT
          elif [ "${ENVIRONMENT}" = "staging" ]; then
            echo "server_ip=${{ vars.INFUZE_SERVER_IP_STAGING }}" >> $GITHUB_OUTPUT
            echo "app_url=${{ vars.NEXT_PUBLIC_APP_URL_STAGING }}" >> $GITHUB_OUTPUT
          fi

  # Deploy to Infuze.cloud
  deploy:
    name: 🚀 Deploy to ${{ needs.determine-environment.outputs.environment }}
    runs-on: ubuntu-latest
    needs: [quality-gates, determine-environment]
    if: needs.determine-environment.outputs.should_deploy == 'true'
    environment: ${{ needs.determine-environment.outputs.environment }}
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false

      - name: 📦 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🔧 Setup SSH key
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.INFUZE_SSH_PRIVATE_KEY }}

      - name: 🔧 Add server to known hosts
        if: needs.determine-environment.outputs.server_ip != ''
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ needs.determine-environment.outputs.server_ip }} >> ~/.ssh/known_hosts

      - name: 🏗️ Build application
        run: pnpm run build
        env:
          NODE_ENV: production
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
          NEXTAUTH_SECRET: ${{ secrets.NEXTAUTH_SECRET }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          NEXT_PUBLIC_APP_URL: ${{ needs.determine-environment.outputs.app_url }}

      - name: 📦 Create deployment archive
        run: |
          # Create deployment directory
          mkdir -p deployment
          
          # Copy necessary files
          cp -r .next deployment/
          cp -r public deployment/
          cp package.json deployment/
          cp pnpm-lock.yaml deployment/
          
          # Create environment file for server
          cat > deployment/.env.production << EOF
          NODE_ENV=production
          PORT=3000
          NEXT_PUBLIC_SUPABASE_URL=${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY=${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
          SUPABASE_SERVICE_ROLE_KEY=${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
          NEXTAUTH_SECRET=${{ secrets.NEXTAUTH_SECRET }}
          JWT_SECRET=${{ secrets.JWT_SECRET }}
          NEXT_PUBLIC_APP_URL=${{ needs.determine-environment.outputs.app_url }}
          NEXT_TELEMETRY_DISABLED=1
          EOF
          
          # Create PM2 ecosystem file
          cat > deployment/ecosystem.config.js << 'EOF'
          module.exports = {
            apps: [{
              name: 'thebestnexusletters-${{ needs.determine-environment.outputs.environment }}',
              script: 'npm',
              args: 'start',
              instances: 2,
              exec_mode: 'cluster',
              env: {
                NODE_ENV: 'production',
                PORT: 3000
              },
              error_file: '/var/log/pm2/thebestnexusletters-error.log',
              out_file: '/var/log/pm2/thebestnexusletters-out.log',
              log_file: '/var/log/pm2/thebestnexusletters.log',
              max_restarts: 3,
              restart_delay: 5000,
              watch: false,
              ignore_watch: ['node_modules', '.next/cache'],
              max_memory_restart: '500M'
            }]
          };
          EOF
          
          # Create deployment script
          cat > deployment/deploy.sh << 'EOF'
          #!/bin/bash
          set -e
          
          echo "🚀 Starting deployment..."
          
          # Install dependencies
          echo "📦 Installing dependencies..."
          pnpm install --frozen-lockfile --prod
          
          # Stop existing application
          echo "⏹️  Stopping existing application..."
          pm2 delete thebestnexusletters-${{ needs.determine-environment.outputs.environment }} || true
          
          # Start application
          echo "▶️  Starting application..."
          pm2 start ecosystem.config.js
          pm2 save
          
          # Health check
          echo "🏥 Running health check..."
          sleep 5
          curl -f http://localhost:3000/api/health || (echo "❌ Health check failed" && exit 1)
          
          echo "✅ Deployment completed successfully!"
          EOF
          
          chmod +x deployment/deploy.sh
          
          # Create archive
          tar -czf deployment.tar.gz -C deployment .

      - name: 🚀 Deploy to server
        if: needs.determine-environment.outputs.server_ip != ''
        run: |
          # Upload deployment archive
          echo "📤 Uploading deployment archive..."
          scp -o StrictHostKeyChecking=no deployment.tar.gz root@${{ needs.determine-environment.outputs.server_ip }}:/tmp/
          
          # Execute deployment on server
          echo "🔄 Executing deployment on server..."
          ssh -o StrictHostKeyChecking=no root@${{ needs.determine-environment.outputs.server_ip }} << 'ENDSSH'
            set -e
            
            # Create application directory
            mkdir -p /var/www/thebestnexusletters
            cd /var/www/thebestnexusletters
            
            # Backup current deployment (if exists)
            if [ -d ".next" ]; then
              echo "💾 Creating backup..."
              mkdir -p ../backups
              tar -czf "../backups/backup-$(date +%Y%m%d-%H%M%S).tar.gz" .
            fi
            
            # Extract new deployment
            echo "📦 Extracting deployment..."
            tar -xzf /tmp/deployment.tar.gz
            rm /tmp/deployment.tar.gz
            
            # Run deployment script
            echo "🚀 Running deployment script..."
            ./deploy.sh
            
            echo "✅ Server deployment completed!"
          ENDSSH

      - name: 🔍 Post-deployment health check
        if: needs.determine-environment.outputs.server_ip != ''
        run: |
          echo "🏥 Running post-deployment health check..."
          
          # Wait a moment for the application to start
          sleep 10
          
          # Check health endpoint
          HEALTH_URL="http://${{ needs.determine-environment.outputs.server_ip }}/api/health"
          
          for i in {1..5}; do
            echo "Attempt $i/5: Checking $HEALTH_URL"
            if curl -f -s "$HEALTH_URL"; then
              echo "✅ Health check passed!"
              exit 0
            fi
            sleep 5
          done
          
          echo "❌ Health check failed after 5 attempts"
          exit 1

      - name: 📊 Deployment summary
        if: always()
        run: |
          echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment**: ${{ needs.determine-environment.outputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Server IP**: ${{ needs.determine-environment.outputs.server_ip }}" >> $GITHUB_STEP_SUMMARY
          echo "- **App URL**: ${{ needs.determine-environment.outputs.app_url }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.determine-environment.outputs.server_ip }}" != "" ]; then
            echo "### 🔗 Quick Links" >> $GITHUB_STEP_SUMMARY
            echo "- [Application](${{ needs.determine-environment.outputs.app_url }})" >> $GITHUB_STEP_SUMMARY
            echo "- [Health Check](http://${{ needs.determine-environment.outputs.server_ip }}/api/health)" >> $GITHUB_STEP_SUMMARY
          fi

  # Cleanup job
  cleanup:
    name: 🧹 Cleanup
    runs-on: ubuntu-latest
    needs: [deploy]
    if: always()
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🧹 Run cleanup
        run: |
          echo "🧹 Running cleanup..."
          # Cleanup is handled by the scripts we created
          echo "Cleanup completed"
